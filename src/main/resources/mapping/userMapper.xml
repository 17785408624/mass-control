<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">

    <!--  <resultMap id="BaseResultMap" type="com.example.entity.User">
         <result column="id" jdbcType="INTEGER" property="id" />
         <result column="userName" jdbcType="VARCHAR" property="userName" />
         <result column="passWord" jdbcType="VARCHAR" property="passWord" />
         <result column="realName" jdbcType="VARCHAR" property="realName" />
     </resultMap>

     <select id="Sel" resultType="com.example.entity.User">
         select * from login_user where id = #{id}
     </select> -->
    <!--
        <insert id="insert" parameterType="com.example.entity.User">
            insert into login_user (userId, userName, phone,
            sex)
            values (#{userid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
            #{sex,jdbcType=VARCHAR})
        </insert>

        <insert id="insertSelective" parameterType="com.example.entity.User">
            insert into login_user
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="userid != null">
                    userId,
                </if>
                <if test="username != null">
                    userName,
                </if>
                <if test="phone != null">
                    phone,
                </if>
                <if test="sex != null">
                    sex,
                </if>
            </trim>
            <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="userid != null">
                    #{userid,jdbcType=INTEGER},
                </if>
                <if test="username != null">
                    #{username,jdbcType=VARCHAR},
                </if>
                <if test="phone != null">
                    #{phone,jdbcType=VARCHAR},
                </if>
                <if test="sex != null">
                    #{sex,jdbcType=VARCHAR},
                </if>
            </trim>
        </insert>
     -->
    <sql id="user_sql_param">
        user_id
        ,
        user_mobile_phone,
        user_register_time,
        user_password,
        user_role,
        info_id,
        user_state
    </sql>
    <sql id="order_by">
        <if test="orderRequests != null">
            <foreach collection="orderRequests" item="orderRequest" open="ORDER BY" separator=",">
                ${orderRequest.orderName} ${orderRequest.orderRule}
            </foreach>
        </if>
    </sql>
    <!-- 插入用户数据 -->
    <!-- Integer addnew(User user) -->
    <insert id="insertUserEntity" parameterType="UserEntity" keyProperty="user_id" keyColumn="user_id"
            useGeneratedKeys="true">
        INSERT INTO user (user_mobile_phone,
                          user_register_time,
                          user_password,
                          user_role)
        VALUES (#{user_mobile_phone},
                #{user_register_time},
                #{user_password},
                #{user_role})
    </insert>
    <select id="selectUserEntityByMobilePhone" resultType="UserEntity">
        SELECT
        <include refid="user_sql_param"></include>

        from
        user
        where
        user_mobile_phone=#{user_mobile_phone}
    </select>

    <insert id="insertOrganizationInfoEntity" parameterType="OrganizationInfoEntity" keyProperty="organization_info_id"
            keyColumn="organization_info_id" useGeneratedKeys="true">
        insert into organization_info (organization_name,
                                       organization_code,
                                       organization_area,
                                       organization_site,
                                       organization_postcode,
                                       organization_telephone,
                                       organization_mail,
                                       organization_principal_name,
                                       organization_principal_mobilephone,
                                       organization_performance_content,
                                       organization_license_file_info_id,
                                       organization_adjunct_file_info_id)
        values (#{organization_name},
                #{organization_code},
                #{organization_area},
                #{organization_site},
                #{organization_postcode},
                #{organization_telephone},
                #{organization_mail},
                #{organization_principal_name},
                #{organization_principal_mobilephone},
                #{organization_performance_content},
                #{organization_license_file_info_id},
                #{organization_adjunct_file_info_id})

    </insert>
    <insert id="insertBatchOrganizationInfoCareermanEntity" parameterType="java.util.List" useGeneratedKeys="false">
        insert into organization_info_careerman
        (
        organization_info_id,
        organization_careerman_name,
        organization_profession,
        organization_performance
        )
        values

        <foreach collection="oiceList" item="oice" separator=",">
            (
            #{organization_info_id},
            #{oice.organization_careerman_name},
            #{oice.organization_profession},
            #{oice.organization_performance}
            )
        </foreach>


    </insert>
    <insert id="insertUserInfoAuditEntity" parameterType="UserInfoAuditEntity" keyProperty="user_info_audit_id"
            useGeneratedKeys="true">
        insert into user_info_audit
        (user_info_audit_state,
         user_info_audit_describe,
         user_info_audit_addtime,
         user_info_audit_updatetime,
         user_info_audit_type,
         user_info_audit_content,
         info_id,
         user_id_add,
         user_id_edit)
        values
        (#{user_info_audit_state},
         #{user_info_audit_describe},
         #{user_info_audit_addtime},
         #{user_info_audit_updatetime},
         #{user_info_audit_type},
         #{user_info_audit_content},
         #{info_id},
         #{user_id_add},
         #{user_id_edit})

    </insert>
    <select id="selectUserEntityByMobilePhone_Password" resultType="UserEntity">
        select
        <include refid="user_sql_param"></include>
        FROM user
        where user_mobile_phone=#{user_mobile_phone} AND user_password=#{user_password}

    </select>

    <insert id="insertExpertInfoEntity" parameterType="ExpertInfoEntity" keyProperty="expert_info_id"
            useGeneratedKeys="true">
        insert into expert_info
        (expert_info_name,
         expert_info_gender,
         expert_info_mobilephone,
         expert_info_worktelephone,
         expert_info_idcard,
         expert_info_workstate,
         expert_info_companyname,
         expert_info_companysite,
         expert_info_postcode,
         expert_info_department,
         expert_info_duty,
         expert_info_companyphone,
         expert_info_companyfax,
         expert_info_mail,
         expert_info_school,
         expert_info_education,
         expert_info_qualification,
         expert_info_qualificationtype,
         expert_info_learnmajor,
         expert_info_workmajor,
         expert_info_declaredesign_design,
         expert_info_declaredesign_safety,
         expert_info_jobresume,
         expert_info_composition,
         expert_info_awardrecord,
         expert_info_researchachievement,
         expert_info_picture_file_info_id,
         expert_info_jadjunct_file_info_id,
         expert_info_birthday,
         expert_info_area)
        values
        (#{expert_info_name},
         #{expert_info_gender},
         #{expert_info_mobilephone},
         #{expert_info_worktelephone},
         #{expert_info_idcard},
         #{expert_info_workstate},
         #{expert_info_companyname},
         #{expert_info_companysite},
         #{expert_info_postcode},
         #{expert_info_department},
         #{expert_info_duty},
         #{expert_info_companyphone},
         #{expert_info_companyfax},
         #{expert_info_mail},
         #{expert_info_school},
         #{expert_info_education},
         #{expert_info_qualification},
         #{expert_info_qualificationtype},
         #{expert_info_learnmajor},
         #{expert_info_workmajor},
         #{expert_info_declaredesign_design},
         #{expert_info_declaredesign_safety},
         #{expert_info_jobresume},
         #{expert_info_composition},
         #{expert_info_awardrecord},
         #{expert_info_researchachievement},
         #{expert_info_picture_file_info_id},
         #{expert_info_jadjunct_file_info_id},
         #{expert_info_birthday},
         #{expert_info_area})

    </insert>

    <update id="updateUserInfoIdAUserStateByinfo_id">
        update
        user
        set
        <if test="user_state != '0'.toString() and user_state != null ">
            user_state=#{user_state},
        </if>
        info_id =#{info_id}
        WHERE
        user_id in
        (
        select user_id_add
        from user_info_audit
        where info_id =#{info_id}
        )
    </update>
    <select id="selectUserEntityByUId"
            resultType="UserEntity"
            parameterType="java.lang.Integer">
        SELECT
            user_id,
            user_mobile_phone,
            user_register_time,
            user_password,
            user_role,
            info_id,
            user_state
        FROM user
        WHERE user_id = #{user_id}
    </select>
    <select id="selectOrganizationInfoNameIdListByState" resultType="java.util.Map">
        SELECT
        oi.organization_name,
        oi.organization_info_id,
        oi.organization_code,
        oi.organization_telephone,
        u.user_register_time,
        u.user_id
        FROM
        organization_info oi
        LEFT JOIN user u ON (
        oi.organization_info_id = u.info_id
        )
        where u.user_role=2
        <if test="user_state !=null">
            and u.user_state=#{user_state}
        </if>
    </select>
    <select id="selectOrganizationListByState" resultType="java.util.Map">
        SELECT
        oi.organization_name,
        oi.organization_info_id,
        oi.organization_code,
        oi.organization_telephone,
        u.user_mobile_phone,
        u.user_register_time,
        u.user_id
        FROM
        organization_info oi
        LEFT JOIN user u ON (
        oi.organization_info_id = u.info_id
        )
        where u.user_role=2
        <if test="user_state != null">
            and u.user_state=#{user_state}
        </if>
        <if test="searchField != null and searchField !=''.toString() and searchField !=' '.toString()">
            and ((user_mobile_phone like "%${searchField}%")
            or (organization_name like "%${searchField}%")
            or (organization_code like "%${searchField}%")
            or (user_id like "%${searchField}%"))
        </if>
        <include refid="order_by"></include>

    </select>
    <select id="selectUserNum" resultType="java.lang.Integer">
        select count(*)
        from user
        where user_role = #{user_role}
          AND user_state = #{user_state}
    </select>
    <select id="selectOrganizationInfoLimit" resultType="java.util.Map">
        select u.user_id,
        oi.organization_name,
        oi.organization_info_id
        from user u
        left join organization_info oi
        on(u.info_id=oi.organization_info_id)
        where
        u.user_role=2
        AND
        u.user_state=#{user_state}
        <if test="excludeUids != null">
            <foreach collection="excludeUids" item="excludeUid">
                and u.user_id
                <![CDATA[ <> ]]>
                #{excludeUid}
            </foreach>
        </if>
        limit ${begin},${end}
    </select>
    <select id="selectExpertInfoList" resultType="java.util.Map">
        SELECT ei.expert_info_id,
        u.user_id,
        ei.expert_info_name,
        ei.expert_info_learnmajor,
        ei.expert_info_workmajor,
        ei.expert_info_companysite,
        ei.expert_info_area,
        fi.file_url,
        fi.file_name
        FROM user u LEFT JOIN expert_info ei
        on(u.info_id=ei.expert_info_id)
        left join file_info fi
        on(ei.expert_info_picture_file_info_id=fi.file_info_id)
        where u.user_role=1
        and u.user_state=#{user_state}
        <if test="orderRequests != null">
            <foreach collection="orderRequests" item="orderRequest" open="ORDER BY" separator=",">
                ${orderRequest.orderName} ${orderRequest.orderRule}
            </foreach>
        </if>
    </select>
    <select id="selectUserIdArrayByUrUs" resultType="java.lang.Integer">
        select u.user_id from
        user u
        <if test="expert_info_educations != null or expert_info_workmajors != null">
            left join expert_info ei
            on u.info_id=ei.expert_info_id
        </if>
        <trim prefix="where" suffix="" prefixOverrides="and">
            <if test="user_role != null">
                and user_role=#{user_role}
            </if>
            <if test="user_state != null">
                and user_state=#{user_state}
            </if>
            <if test="expert_info_educations != null">
                and
                <foreach collection="expert_info_educations" open=" (" close=")" item="item" separator="or">
                    ei.expert_info_education=#{item}
                </foreach>
            </if>
            <if test="expert_info_workmajors != null">
                and
                <foreach collection="expert_info_workmajors" open="(" close=")" item="item" separator="or">
                    ei.expert_info_workmajor=#{item}
                </foreach>
            </if>
        </trim>
    </select>
    <select id="selectExpertInfoListById" resultType="java.util.Map">
        select u.user_id,ei.expert_info_name from
        user u
        left join expert_info ei
        on(u.info_id=ei.expert_info_id)
        <trim prefix="where">
            <if test="Uids!=null">
                <foreach collection="Uids" item="item" separator="or">
                    u.user_id=${item}
                </foreach>
            </if>
        </trim>
    </select>
    <select id="selectOieByPpProjectid" resultType="java.util.Map">
        SELECT
            oi.organization_info_id,
            oi.organization_telephone,
            oi.organization_name
        FROM
            user u
                LEFT JOIN organization_info oi ON (
                u.info_id = oi.organization_info_id
                )
        WHERE
                u.user_id IN (
                SELECT
                    user_id
                FROM
                    project_participant
                WHERE
                    project_info_id = #{project_info_id}
            )
          AND u.user_role = 2
    </select>
    <select id="selectExperList" resultType="java.util.Map">
        SELECT
        u.user_id,
        ei.expert_info_name,
        u.user_mobile_phone,
        ei.expert_info_idcard,
        ei.expert_info_companyname,
        ei.expert_info_department,
        ei.expert_info_mail,
        ei.expert_info_education,
        ei.expert_info_learnmajor
        FROM
        user u
        LEFT JOIN expert_info ei
        on(u.info_id=ei.expert_info_id)
        where u.user_role=1
        and u.user_state=2
        <if test="conditions !=null and conditions != 'null' ">
            and (
            ei.expert_info_name like "%${conditions}%"
            or ei.expert_info_idcard like "%${conditions}%"
            or u.user_mobile_phone like "%{conditions}%"
            or ei.expert_info_companyname like "%{conditions}%"
            )
        </if>


        <if test="orderRequests != null">
            <foreach collection="orderRequests" item="orderRequest" open="ORDER BY" separator=",">
                ${orderRequest.orderName} ${orderRequest.orderRule}
            </foreach>
        </if>
    </select>

    <select id="selectOrganizationList" resultType="java.util.Map">
        SELECT
        u.user_id,
        u.user_mobile_phone,
        oi.organization_name,
        oi.organization_code,
        oi.organization_telephone,
        oi.organization_site,
        oi.organization_postcode
        FROM
        user u
        LEFT JOIN organization_info oi
        on(u.info_id=oi.organization_info_id)
        where u.user_role=2
        and u.user_state=2
        <if test="conditions !=null and conditions != 'null' ">
            and (
            u.user_mobile_phone like "%${conditions}%"
            or oi.organization_name like "%${conditions}%"
            or oi.organization_code like "%{conditions}%"
            )
        </if>


        <if test="orderRequests != null">
            <foreach collection="orderRequests" item="orderRequest" open="ORDER BY" separator=",">
                ${orderRequest.orderName} ${orderRequest.orderRule}
            </foreach>
        </if>
    </select>
    <update id="updatePasswordByUserId">
        update
            user
        set
            user_password=#{password}
        where
            user_id = #{userId}
    </update>
    <update id="updatePasswordByUseruserMobilePhone">
        update
            user
        set
            user_password=#{password}
        where
            user_mobile_phone = #{userMobilePhone}
    </update>
    <update id="updateUserState">
        update user
        set user_state =#{userState}
        where user_id
        in
        <foreach collection="uIds" separator="," item="uIds" open="(" close=")">
            ${uIds}
        </foreach>
    </update>
    <select id="selectExpersByState" resultType="java.util.Map">
        SELECT
        u.user_id,
        ei.expert_info_name,
        u.user_mobile_phone,
        ei.expert_info_idcard,
        ei.expert_info_companyname,
        ei.expert_info_department,
        ei.expert_info_mail,
        ei.expert_info_education,
        ei.expert_info_learnmajor,
        u.user_register_time,
        u.user_state
        FROM
        user u
        LEFT JOIN expert_info ei
        on(u.info_id=ei.expert_info_id)
        where u.user_role=1
        <if test="userStates != null">
            and u.user_state IN
            <foreach collection="userStates" item="userState" open="(" close=")" separator=",">
                ${userState}
            </foreach>
        </if>
        <if test="condition !=null and !condition.equals('') and !condition.equals(' ')">
            and (
            ei.expert_info_name like "%${condition}%"
            or ei.expert_info_idcard like "%${condition}%"
            or u.user_mobile_phone like "%${condition}%"
            or ei.expert_info_companyname like "%${condition}%"
            )
        </if>
        and TRIM(user_id)!='null'
        <if test="orderRequests != null">
            <foreach collection="orderRequests" item="orderRequest" open="ORDER BY" separator=",">
                ${orderRequest.orderName} ${orderRequest.orderRule}
            </foreach>
        </if>
    </select>


    <select id="selectOrganizationByState" resultType="java.util.Map">
        SELECT
        oi.organization_name,
        oi.organization_info_id,
        oi.organization_code,
        oi.organization_telephone,
        u.user_register_time,
        oi.organization_principal_name,
        u.user_id,
        u.user_state
        FROM
        user u
        LEFT JOIN organization_info oi
        on(u.info_id=oi.organization_info_id)
        where u.user_role=2
        <if test="userStates != null">
            and u.user_state IN
            <foreach collection="userStates" item="userState" open="(" close=")" separator=",">
                ${userState}
            </foreach>
        </if>
        <if test="condition !=null and !condition.equals('') and !condition.equals(' ')">
            and (
            oi.organization_name like "%${condition}%"
            or oi.organization_code like "%${condition}%"
            or oi.organization_telephone like "%${condition}%"
            )
        </if>
        and TRIM(user_id)!='null'
        <if test="orderRequests != null">
            <foreach collection="orderRequests" item="orderRequest" open="ORDER BY" separator=",">
                ${orderRequest.orderName} ${orderRequest.orderRule}
            </foreach>
        </if>
    </select>

    <select id="selectExperInfoByQueryFields" resultType="java.util.LinkedHashMap">
        SELECT
        <foreach collection="queryFields" item="queryField" separator=",">
            <choose>
                <when test="queryField.equals('user_register_time')">
                    FROM_UNIXTIME( ${queryField} / 1000, '%Y-%m-%d %H:%i:%s' ) as user_register_time
                </when>
                <when test="queryField.equals('user_role')">
                    CASE
                    user_role
                    WHEN 1 THEN
                    "专家"
                    WHEN 2 THEN
                    "第三方机构"
                    WHEN 3 THEN
                    "煤监局"
                    WHEN 4 THEN
                    "能源局"
                    END as user_role
                </when>
                <when test="queryField.equals('user_state')">
                    CASE
                    user_state
                    WHEN 1 THEN
                    '未认证审核'
                    WHEN 2 THEN
                    '已认证审核'
                    WHEN 3 THEN
                    '解聘'
                    END as user_state
                </when>
                <when test="queryField.equals('expert_info_education')">
                    CASE expert_info_education
                    WHEN 1 THEN '小学'
                    WHEN 2 THEN '初中'
                    WHEN 3 THEN '高中'
                    WHEN 4 THEN '大学'
                    WHEN 5 THEN '硕士'
                    WHEN 6 THEN '博士'
                    WHEN 7 THEN '更多'
                    END as expert_info_education
                </when>
                <when test="queryField.equals('expert_info_learnmajor')">
                    specialtyMap(${queryField},'expert_info_learnmajor','|') as expert_info_learnmajor
                </when>
                <when test="queryField.equals('expert_info_workmajor')">
                    specialtyMap(${queryField},'expert_info_workmajor','|') as expert_info_workmajor
                </when>
                <when test="queryField.equals('expert_info_declaredesign_design')">
                    specialtyMap(${queryField},'expert_info_declaredesign_design','|') as
                    expert_info_declaredesign_design
                </when>
                <when test="queryField.equals('expert_info_declaredesign_safety')">
                    specialtyMap(${queryField},'expert_info_declaredesign_safety','|') as
                    expert_info_declaredesign_safety
                </when>
                <when test="queryField.equals('expert_info_gender')">
                    case ${queryField}
                    when 1 then '男'
                    when 2 then '女'
                    END AS expert_info_gender
                </when>
                <otherwise>${queryField}</otherwise>
            </choose>
        </foreach>
        FROM user u
        LEFT JOIN expert_info ei ON ( u.info_id = ei.expert_info_id )
        where user_role =1
        <if test="userStates != null">
            and user_state IN
            <foreach collection="userStates" item="userState" open="(" close=")" separator=",">
                #{userState}
            </foreach>
        </if>
        and TRIM(user_id)!='null'
    </select>
    <select id="selectOrganizationByQueryFields" resultType="java.util.LinkedHashMap">
        select
        <foreach collection="queryFields" separator="," item="queryField">
            <choose>
                <when test="queryField.equals('user_register_time')">
                    FROM_UNIXTIME(user_register_time/1000,'%Y-%m-%d %H:%i:%s') as user_register_time
                </when>
                <when test="queryField.equals('user_role')">
                    CASE
                    user_role
                    WHEN 1 THEN
                    "专家"
                    WHEN 2 THEN
                    "第三方机构"
                    WHEN 3 THEN
                    "煤监局"
                    WHEN 4 THEN
                    "能源局"
                    END as user_role
                </when>
                <when test="queryField.equals('user_state')">
                    CASE
                    user_state
                    WHEN 1 THEN
                    '未认证审核'
                    WHEN 2 THEN
                    '已认证审核'
                    WHEN 3 THEN
                    '解聘'
                    END as user_state
                </when>
                <when test="queryField.equals('user_info_audit_type')">
                    CASE user_info_audit_type
                    WHEN 1 THEN "初审"
                    WHEN 2 THEN "变更审核"
                    END as user_info_audit_type
                </when>
                <otherwise>
                    ${queryField}
                </otherwise>
            </choose>
        </foreach>
        FROM
        user u
        LEFT JOIN organization_info oi ON (u.info_id=oi.organization_info_id )
        where user_role =2
        <if test="userStates != null ">
            and user_state IN
            <foreach collection="userStates" item="userState" open="(" close=")" separator=",">
                #{userState}
            </foreach>
        </if>
    </select>
    <select id="selectExpertExpertCompanyname" resultType="String">
        SELECT
        <if test="!repetition">
            DISTINCT
        </if>
        trim(expert_info_companyname)
        FROM
        expert_info ei
        LEFT JOIN USER u ON ( ei.expert_info_id = u.info_id )
        WHERE
        trim( u.user_id ) != 'null'
    </select>
    <select id="selectExpertMajorSum" resultType="java.util.Map">
        SELECT
        <foreach collection="majors" item="major" separator=",">
            sum( IF (
            <foreach collection="types" item="type" separator="OR">
                FIND_IN_SET( ${major}, ${type} )
            </foreach>
            , 1, 0 ) )
            AS major${major}
        </foreach>
        FROM
        expert_info ei
        left join user u
        on ei.expert_info_id= u.info_id
        WHERE trim(u.user_id) !="null"
        <if test="expertInfoEducations != null">
            and expert_info_education in
            <foreach collection="expertInfoEducations" item="expertInfoEducation" open="(" close=")" separator=",">
                #{expertInfoEducation}
            </foreach>
        </if>
        <if test="excludeCompanyNames != null">
            and expert_info_id not in (
            select similarity_company_id from merge_similarity_company
            where similarity_company_name in
            <foreach collection="excludeCompanyNames" item="excludeCompanyName" open="(" close=")" separator=",">
                #{excludeCompanyName}
            </foreach>
            )

        </if>
    </select>
    <select id="selectExpertdeclaredesignSum" resultType="java.util.Map">
        SELECT
        <foreach collection="declaredesigns" item="declaredesign" separator=",">
            sum( IF (
            <foreach collection="types" item="type" separator="OR">
                FIND_IN_SET( ${declaredesign}, ${type} )
            </foreach>
            , 1, 0 ) )
            AS declaredesign${declaredesign}
        </foreach>
        FROM
        expert_info ei
        left join user u
        on ei.expert_info_id= u.info_id
        WHERE trim(u.user_id) !="null"
        <if test="expertInfoEducations != null">
            and expert_info_education in
            <foreach collection="expertInfoEducations" item="expertInfoEducation" open="(" close=")" separator=",">
                #{expertInfoEducation}
            </foreach>
        </if>
        <if test="excludeCompanyNames != null">
            and expert_info_id not in (
            select similarity_company_id from merge_similarity_company
            where similarity_company_name in
            <foreach collection="excludeCompanyNames" item="excludeCompanyName" open="(" close=")" separator=",">
                #{excludeCompanyName}
            </foreach>
            )

        </if>
    </select>


    <select id="selectExpertGroupDomain" resultType="java.util.Map">
        SELECT
        <choose>
            <when test="domain.equals('major')">
                substring_index(
                substring_index( CONCAT( ei.expert_info_learnmajor, ',', ei.expert_info_workmajor ), ',', addself.id + 1
                ),
                ',',- 1
                )
            </when>
            <when test="domain.equals('learnmajor')">
                substring_index(
                substring_index( ei.expert_info_learnmajor, ',', addself.id + 1 ),
                ',',- 1
                )
            </when>
            <when test="domain.equals('workmajor')">
                substring_index(
                substring_index( ei.expert_info_workmajor, ',', addself.id + 1 ),
                ',',- 1
                )
            </when>
            <when test="domain.equals('declaredesign')">
                substring_index(
                substring_index( CONCAT( ei.expert_info_declaredesign_design, ',', ei.expert_info_declaredesign_safety
                ), ',', addself.id + 1
                ),
                ',',- 1
                )
            </when>
            <when test="domain.equals('declaredesign_design')">
                substring_index(
                substring_index( ei.expert_info_declaredesign_design, ',', addself.id + 1
                ),
                ',',- 1
                )
            </when>
            <when test="domain.equals('declaredesign_safety')">
                substring_index(
                substring_index( ei.expert_info_declaredesign_safety, ',', addself.id + 1
                ),
                ',',- 1
                )

            </when>
        </choose>
        AS domain,
        COUNT( DISTINCT  user_id)as userNum,
        GROUP_CONCAT( DISTINCT u.user_id SEPARATOR ',' ) as user_id
        <!--GROUP_CONCAT( DISTINCT ei.expert_info_name SEPARATOR ',' ),
        GROUP_CONCAT( DISTINCT ei.expert_info_id SEPARATOR ',' )-->
        FROM
        expert_info ei

        JOIN addself ON addself.id <![CDATA[<]]>
        <choose>
            <when test="domain.equals('major')">
                (length( CONCAT( ei.expert_info_learnmajor, ',', ei.expert_info_workmajor ) ) - length( REPLACE ( CONCAT(
                ei.expert_info_learnmajor, ',', ei.expert_info_workmajor ), ',', '' ) ) + 1)

            </when>
            <when test="domain.equals('learnmajor')">
                (length( ei.expert_info_learnmajor ) - length( REPLACE ( ei.expert_info_learnmajor, ',', '' ) )+ 1  )
            </when>
            <when test="domain.equals('workmajor')">
                (length( ei.expert_info_workmajor ) - length( REPLACE ( ei.expert_info_workmajor, ',', '' ) )+ 1  )
             </when>
            <when test="domain.equals('declaredesign')">
                (length( CONCAT( ei.expert_info_declaredesign_design, ',', ei.expert_info_declaredesign_safety ) ) -
                length( REPLACE ( CONCAT(
                ei.expert_info_declaredesign_design, ',', ei.expert_info_declaredesign_safety ), ',', '' ) ) + 1)
            </when>
            <when test="domain.equals('declaredesign_design')">
                (length( ei.expert_info_declaredesign_design ) - length( REPLACE ( ei.expert_info_declaredesign_design, ',', '' ) )+ 1  )
             </when>
            <when test="domain.equals('declaredesign_safety')">
                (length( ei.expert_info_declaredesign_safety ) - length( REPLACE ( ei.expert_info_declaredesign_safety, ',', '' ) )+ 1  )
             </when>
        </choose>
        LEFT JOIN USER u ON ei.expert_info_id = u.info_id
         WHERE
        u.user_id != 'null'
        and u.user_state=2
         <if test="expert_info_educations != null">
            and expert_info_education in
            <foreach collection="expert_info_educations" item="expert_info_education" open="(" close=")" separator=",">
                #{expert_info_education}
            </foreach>
        </if>
        <if test="excludeCompanyNames != null">
           and expert_info_id not in(
           select similarity_company_id from merge_similarity_company where similarity_company_name in
           <foreach collection="excludeCompanyNames" item="excludeCompanyName" separator="," open="(" close=")">
               #{excludeCompanyName}
           </foreach>
            )
        </if>
        GROUP BY
        domain
    </select>



    <select id="selectaExpertGroupDomain" resultType="java.util.Map">
        select user_id from  expert_info ei
        LEFT JOIN USER u ON ei.expert_info_id = u.info_id
        WHERE
        u.user_id != 'null'
        and u.user_state=2
        and
        FIND_IN_SET( ${majorCode}, expert_info_workmajor )
        <if test="expert_info_educations != null">
            and expert_info_education in
            <foreach collection="expert_info_educations" item="expert_info_education" open="(" close=")" separator=",">
                #{expert_info_education}
            </foreach>
        </if>
        <if test="excludeCompanyNames != null">
            and expert_info_id not in(
            select similarity_company_id from merge_similarity_company where similarity_company_name in
            <foreach collection="excludeCompanyNames" item="excludeCompanyName" separator="," open="(" close=")">
                #{excludeCompanyName}
            </foreach>
            )
        </if>
        <if test="originUids != null and originUids.length >0">
        and user_id not in(
              <foreach collection="originUids" item="originUid" separator=",">
                  #{originUid}
              </foreach>
            )
        </if>

    </select>


    <select id="selectExpertCompany" resultType="java.util.Map">
        SELECT
        trim(expert_info_companyname) as expert_info_companyname,
        ei.expert_info_id
        FROM
        expert_info ei
        LEFT JOIN USER u ON (ei.expert_info_id = u.info_id)
        WHERE
        trim(u.user_id) != 'null'
        <if test="!containMec">
            and
            expert_info_id not in(
            select similarity_company_id from merge_similarity_company
            )
        </if>
    </select>
    <insert id="insertMergeSimilarityCompanyStr">
        insert into (similarity_company_name,similarity_company_id)
        values
        <foreach collection="companyMergeList" item="companyMergeMap" separator=",">
            (#{companyMergeMap.mergeExpertName},#{companyMergeMap.mergeExpertIds})
        </foreach>
    </insert>
    <insert id="insertMergeSimilarityCompany">
        insert into merge_similarity_company(similarity_company_name,similarity_company_id)
        values
        <foreach collection="companyMergeList" item="companyMergeMap" separator=",">
            <foreach collection="companyMergeMap.mergeExpertIds" item="mergeExpertId" separator=",">
                (#{companyMergeMap.mergeExpertName},#{mergeExpertId})
            </foreach>
        </foreach>
    </insert>
    <select id="selectSecDistinct" resultType="String">
        SELECT DISTINCT similarity_company_name
        FROM
            merge_similarity_company
    </select>
    <select id="deleteData" resultType="String">
        delete  FROM
            merge_similarity_company
    </select>
    <select id="selectExpertInfosByUids" resultType="java.util.Map">
        SELECT
            u.user_id,
            ei.expert_info_name,
            u.user_mobile_phone,
            ei.expert_info_qualification,
            expert_info_education,
            expert_info_learnmajor,
            expert_info_workmajor,
            expert_info_declaredesign_design,
            expert_info_declaredesign_safety,
            expert_info_companyname
        FROM
            USER u
                LEFT JOIN expert_info ei ON ( u.info_id = ei.expert_info_id )
        WHERE
            trim( ei.expert_info_id ) != 'null'
            and u.user_id in
            <foreach collection="uIds" item="uId" open="(" close=")" separator=",">
                #{uId}
            </foreach>
    </select>


</mapper>
